onlyoffice:
core: office内核,c++,QT,boost
sdkjs: 公共库
server: 服务端,node.js
web-apps: 前端
dictionaries: for spellchecking
sdkjs-plugins
字体
兼容性
WOPI protocol

Docker安装:
docker run -itd -p 8081:80 --restart=always -e JWT_SECRET=my_jwt_secret --name onlyofficeserver onlyoffice/documentserver
docker exec onlyofficeserver sudo supervisorctl start ds:example
http://192.168.45.85:8081/
docker exec onlyofficeserver /var/www/onlyoffice/documentserver/npm/json -f /etc/onlyoffice/documentserver/local.json 'services.CoAuthoring.secret.session.string'
docker exec onlyofficeserver sudo sed 's,autostart=false,autostart=true,' -i /etc/supervisor/conf.d/ds-example.conf

DEB安装:
sudo apt install postgresql -y
sudo su postgres
psql -c "CREATE USER onlyoffice WITH PASSWORD 'onlyoffice';"
psql -c "CREATE DATABASE onlyoffice OWNER onlyoffice;"
exit

sudo apt install rabbitmq-server -y
echo onlyoffice-documentserver onlyoffice/ds-port select 8080 | sudo debconf-set-selections
sudo apt install gpg curl -y
mkdir -p -m 700 ~/.gnupg
curl -fsSL https://download.onlyoffice.com/GPG-KEY-ONLYOFFICE | gpg --no-default-keyring --keyring gnupg-ring:/tmp/onlyoffice.gpg --import
chmod 644 /tmp/onlyoffice.gpg
sudo chown root:root /tmp/onlyoffice.gpg
sudo mv /tmp/onlyoffice.gpg /usr/share/keyrings/onlyoffice.gpg
echo "deb [signed-by=/usr/share/keyrings/onlyoffice.gpg] https://download.onlyoffice.com/repo/debian squeeze main" | sudo tee /etc/apt/sources.list.d/onlyoffice.list
sudo apt update
sudo apt install ttf-mscorefonts-installer -y
sudo apt install onlyoffice-documentserver -y

wget http://download.onlyoffice.com/docs/docs-install.sh
sudo su
bash docs-install.sh

源码构建:
https://helpcenter.onlyoffice.com/installation/docs-community-compile.aspx

物理机Ubuntu 20.04
ARM 8core 16G
mkdir /home/thomas/build
cd /home/thomas/build
git clone https://github.com/ONLYOFFICE/build_tools.git
#docker run -itd --cpus=3 --blkio-weight 800 -v $PWD:/build --name ubuntu01 ubuntu:16.04
docker run -itd -v $PWD:/build --name ubuntu01 ubuntu:16.04
docker run -itd -v $PWD:/build --name ubuntu01 ubuntu:18.04
docker run -itd -v $PWD:/build --name ubuntu02 ubuntu:20.04
docker exec -it ubuntu02 bash
cd /build/build_tools/tools/linux
#rm -rf node_js_setup_14.x packages_complete
apt-get update && apt-get install python git sudo vim tree -y
./automate.py server
./automate.py server --branch=v8.2.2.26
./automate.py server --branch=v9.0.3.29
./automate.py server --branch=v8.2.2.26 --platform="linux_arm64"
./automate.py server --branch=v9.0.3.29 --platform="linux_arm64"

git checkout -- .
git status
git checkout v8.2.2.26
git checkout v9.0.3.29

编译ARM版:
vim /build/build_tools/tools/linux/automate.py
amd64->arm64

mkdir /root/office
cd /root/office
apt install ninja-build clang -y
#https://gn.googlesource.com/gn.git
git clone https://github.com/wangzq0807/gn.git
#python3 build/gen.py --allow-warning
cd gn
./build/gen.py
ninja -C out
out/gn_unittests
cp /root/office/gn/out/gn /build/core/Common/3dParty/v8_89/v8/buildtools/linux64/gn
#/build/core/Common/3dParty/v8_89/v8/third_party/ninja/ninja

apt install wget
wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-aarch64-linux-gnu.tar.xz
xz -d clang+llvm-12.0.1-aarch64-linux-gnu.tar.xz
tar -xvf clang+llvm-12.0.1-aarch64-linux-gnu.tar
mv clang+llvm-12.0.1-aarch64-linux-gnu clang12
#apt-get install clang-12
#wget https://apt.llvm.org/llvm.sh
#chmod u+x llvm.sh
#sudo ./llvm.sh 12

vim /build/build_tools/scripts/core_common/modules/v8_89.py
args_copy.append("clang_base_path=\\\"/root/office/clang12\\\"")
args_copy.append("clang_use_chrome_plugins=false")
#cd /build/core/Common/3dParty/v8_89/v8/out.gn/linux_arm64
#cat toolchain.ninja
#cat args.gn

vim /build/build_tools/make.py
# base.check_python()
ls -l /usr/bin/python*
cd /usr/bin
rm -rf python
ln -s python3.8 python

apt-get install optipng
cp /usr/bin/optipng /build/web-apps/build/node_modules/optipng-bin/vendor/optipng

去掉限制:
vim /build/server/Common/sources/constants.js
exports.LICENSE_CONNECTIONS = 20
vim /build/build_tools/tools/linux/automate.py
build_tools_params = ["--update", "0"]

cd /home/thomas/build/build_tools/out/linux_64/onlyoffice/documentserver
mv dictionaries dictionaries2
mkdir dictionaries
mv dictionaries2/en_US dictionaries/
rm -rf dictionaries2
rm -rf web-apps/apps/documenteditor/main/resources/help
rm -rf web-apps/apps/spreadsheeteditor/main/resources/help
rm -rf web-apps/apps/presentationeditor/main/resources/help
rm -rf web-apps/apps/pdfeditor/main/resources/help
rm -rf web-apps/apps/common/main/resources/help

cd /home/thomas/build/build_tools/out/linux_64/onlyoffice
tar -zcvf documentserver.tar.gz documentserver
sftp thomas@47.253.255.13
get /home/thomas/build/build_tools/out/linux_64/onlyoffice/documentserver.tar.gz ./
get /home/thomas/build/build_tools/out/linux_arm64/onlyoffice/documentserver.tar.gz ./

rsync -avzP documentserver.tar.gz rsync://thomas@192.168.79.27:873/sun/
cd /volume1/@appstore/com.ugreen.office/onlyoffice
cp /volume1/sun/documentserver.tar.gz ./
tar -zxvf documentserver.tar.gz
cd documentserver
mkdir fonts
LD_LIBRARY_PATH=${PWD}/server/FileConverter/bin server/tools/allfontsgen \
  --input="${PWD}/core-fonts" \
  --allfonts-web="${PWD}/sdkjs/common/AllFonts.js" \
  --allfonts="${PWD}/server/FileConverter/bin/AllFonts.js" \
  --images="${PWD}/sdkjs/common/Images" \
  --selection="${PWD}/server/FileConverter/bin/font_selection.bin" \
  --output-web='fonts' \
  --use-system="true"

LD_LIBRARY_PATH=${PWD}/server/FileConverter/bin server/tools/allthemesgen \
  --converter-dir="${PWD}/server/FileConverter/bin"\
  --src="${PWD}/sdkjs/slide/themes"\
  --output="${PWD}/sdkjs/common/Images"

vim documentserver/server/Common/config/default.json
{
    "services": {
        "CoAuthoring": {
            "autoAssembly": {
                "enable": true,
                "interval": "1m"
            },
            "sql": {
                "dbPort": 5437,
                "dbUser": "postgres",
            }
        }
    }
}

if (Ua && Ua.length > 5) {if (Ua.substring(0, 5) == "http:" && window.location.protocol == 'https:') {Ua = Ua.replace("http://", "https://");}};
if (Va && Va.length > 5) {if (Va.substring(0, 5) == "http:" && window.location.protocol == 'https:') {Va = Va.replace("http://", "https://");}};
if (Db && Db.length > 5) {if (Db.substring(0, 5) == "http:" && window.location.protocol == 'https:') {Db = Db.replace("http://", "https://");}};
asc_ajax

su - postgres -c "/usr/lib/postgresql/15/bin/pg_ctl start -D db -s -w"
psql -h localhost -p 5437 -d onlyoffice -U postgres -f /var/www/onlyoffice/documentserver/server/schema/postgresql/createdb.sql
su - postgres -c "/usr/lib/postgresql/15/bin/pg_ctl stop -D db -s -w"

/*
sudo apt install postgresql -y
sudo su postgres
psql -c "CREATE DATABASE onlyoffice;"
psql -c "CREATE USER onlyoffice WITH password 'onlyoffice';"
psql -c "GRANT ALL privileges ON DATABASE onlyoffice TO onlyoffice;"
psql
\c onlyoffice postgres
GRANT CREATE ON SCHEMA public TO onlyoffice;
\q
psql -h localhost -p 5432 -d onlyoffice -U onlyoffice -f /var/www/onlyoffice/documentserver/server/schema/postgresql/createdb.sql
exit
*/

apt install rabbitmq-server -y
apt download erlang-asn1 erlang-base erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl rabbitmq-server socat
Erlang   25.2.3
RabbitMQ 3.10.8

export NODE_ENV=development-linux
export NODE_CONFIG_DIR=/var/www/onlyoffice/documentserver/server/Common/config
export LD_LIBRARY_PATH=/var/www/onlyoffice/documentserver/server/FileConverter/bin
cd /var/www/onlyoffice/documentserver/server/FileConverter
nohup /var/www/onlyoffice/documentserver/server/FileConverter/converter >>/root/converter.log 2>&1 &
cd /var/www/onlyoffice/documentserver/server/DocService
nohup /var/www/onlyoffice/documentserver/server/DocService/docservice >>/root/docservice.log 2>&1 &

cd /var/www/onlyoffice/documentserver-example
mkdir files
vim config/development-linux.json
{
  "server": {
    "port": 3000,
    "siteUrl": "http://192.168.78.92:8000/",
    "apiUrl": "web-apps/apps/api/documents/api.js",
    "preloaderUrl": "web-apps/apps/api/documents/cache-scripts.html"
  }
}
NODE_ENV=development-linux NODE_CONFIG_DIR=$PWD/config ./example

export NODE_ENV=development-linux
export NODE_CONFIG_DIR=$PWD/config
nohup ./example >>example.log 2>&1 &

http://192.168.78.92:3000/
http://192.168.78.92:8000/web-apps/apps/api/documents/api.js

git clone https://github.com/ONLYOFFICE/document-editor-vue.git
curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo npm install -g npm
cd document-editor-vue
npm install --save @onlyoffice/document-editor-vue
vim config/default.json
{
  "documentServerUrl": "http://192.168.44.89:8000/"
}
npm run build-storybook
npm run storybook
http://192.168.44.89:6006/

apt-get install --reinstall -y rabbitmq/*.deb >> /tmp/office_install.log 2>&1 || true
apt install --reinstall -y rabbitmq/*.deb

dpkg --install rabbitmq/*.deb
dpkg --remove erlang-asn1 erlang-base erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl rabbitmq-server socat
dpkg --purge erlang-asn1 erlang-base erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl rabbitmq-server socat

apt-get install -d rabbitmq-server
cd /var/cache/apt/archives
apt-get download rabbitmq-server

erlang-asn1 erlang-base erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl libsctp1 rabbitmq-server socat

卸载:
systemctl stop office_serv
apt-get purge -y erlang-asn1 erlang-base erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl rabbitmq-server socat
su - postgres -c "/usr/lib/postgresql/15/bin/pg_ctl stop -D db -s -w"

psql -h localhost -p $dbport -d $dbname -U $dbuser
su - postgres -c "/usr/lib/postgresql/15/bin/pg_ctl restart -D db -s -w"

systemctl status office_serv
netstat -ltnp | grep 5437
systemctl status rabbitmq-server
ps -ef | grep converter
ps -ef | grep docservice
ps -ef | grep office_serv

pg 5437
mq 25672 5672 4369
serv 3302
onlyoffice unix socket

var t=a.onerror;
if(!a.WebgetBrowserUI){a.WebgetBrowserUI=function(){}}

STSong-Light-UniGB-UCS2-H

从docker容器中导出:
tar -zcvf documentserver.tar.gz documentserver
docker cp onlyofficeserver:/var/www/onlyoffice/documentserver.tar.gz ./
docker cp onlyofficeserver:/etc/onlyoffice/documentserver_config.tar.gz ./
sftp thomas@47.76.149.204
get /home/thomas/office/documentserver.tar.gz ./
get /home/thomas/office/documentserver_config.tar.gz ./

rm -rf sdkjs/common/AllFonts.js
rm -rf sdkjs/common/AllFonts.js.gz
rm -rf server/FileConverter/bin/AllFonts.js
rm -rf server/FileConverter/bin/font_selection.bin
rm -rf sdkjs/slide/themes/theme*
rm -rf sdkjs/common/Images/fonts_thumbnail*
rm -rf sdkjs/common/Images/themes_thumbnail*
rm -rf fonts

find . -name "*.gz" -type f -exec rm -rf {} \;

apryse:
Web SDK
Server SDK

mkdir /dev/mqueue
mount -t mqueue none /dev/mqueue

killall AliYunDun
killall AliYunDunUpdate
killall AliYunDunMonitor
killall assist_daemon
systemctl stop AssistDaemon
killall aliyun-service
systemctl stop aliyun
wget "http://update2.aegis.aliyun.com/download/uninstall.sh" && chmod +x uninstall.sh && ./uninstall.sh

Debian12 bookworm install node16
curl -fsSL https://deb.nodesource.com/setup_16.x >> ./setup_16.x
vim setup_16.x
删除curl
if ! apt-get install -y apt-transport-https ca-certificates gnupg; then
./setup_16.x
apt-get install -y nodejs
npm install -g grunt-cli
npm install -g pkg
ln -s python3 /usr/bin/python

base.cmd_in_dir(server_dir + "/FileConverter", "pkg", [".", "-t", pkg_target, "--options", "heapsnapshot-signal=SIGUSR2,expose-gc,max-old-space-size=256", "-o", "converter"])

后端修改:
0.去掉限制
vim /build/server/Common/sources/constants.js exports.LICENSE_CONNECTIONS = 20
1、convertor变成一个进程
vim /build/server/FileConverter/sources/convertermaster.js去掉cluster
2、打开文档下载时直接拷贝，不把文件数据加载到内存
3、redis替换rabbitmq
4、编辑保存后第二次打开密码不对问题

前端修改:
1、docxf屏蔽弹窗 textConvertFormSave
DE.ApplicationController.textConvertFormDownload
DE.Controllers.Toolbar.textConvertFormDownload
textConvertFormSave
vim /build/web-apps/apps/documenteditor/main/app/controller/Toolbar.js
false&&t.isOForm&&t.canDownload&&Common.UI.warning

2、代理导致https丢失
vim sdkjs/common/editorscommon.js type === "POST"
3、屏蔽360极速浏览器弹窗 var t=a.onerror;if(!a.WebgetBrowserUI){a.WebgetBrowserUI=function(){}}a.onerror=

pkg@6.6.0
https://github.com/yao-pkg/pkg-fetch/releases/download/v3.5/node-v20.19.4-linux-x64
https://github.com/yao-pkg/pkg-fetch/releases/download/v3.5/node-v20.19.4-linux-arm64
{"tag":"v3.5","name":"node-v20.19.4-linux-x64"}
mkdir ~/.pkg-cache/v3.5
mv node-v20.19.4-linux-x64 ~/.pkg-cache/v3.5/fetched-v20.19.4-linux-x64

apt-get remove nodejs
rm -rf /usr/lib/node_modules
cd /etc/apt/sources.list.d
rm -rf nodesource*
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &&sudo apt-get install -y nodejs

npm config set proxy http://192.168.79.229:20811
npm config set https-proxy http://192.168.79.229:20811
npm config list

cd server
rm -rf node_modules
rm -rf DocService/node_modules
rm -rf Common/node_modules
rm -rf Metrics/node_modules
rm -rf FileConverter/node_modules

tar -zcvf sdkjs.tar.gz sdkjs
tar -zcvf server.tar.gz server
tar -zcvf web-apps.tar.gz web-apps
rsync -avzP *.tar.gz rsync://thomas@192.168.79.27:873/sun/
tar -zxvf sdkjs.tar.gz
tar -zxvf server.tar.gz
tar -zxvf web-apps.tar.gz
