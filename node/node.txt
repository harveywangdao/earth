Ubuntu安装node.js
export http_proxy="http://192.168.79.47:10811"
export https_proxy="http://192.168.79.47:10811"

sudo vim /etc/apt/apt.conf
Acquire::http::proxy "http://192.168.79.47:10811";
Acquire::https::proxy "http://192.168.79.47:10811";

curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - && sudo apt-get install -y nodejs
node -v
npm -v
#sudo apt-get install npm yarn -y
sudo apt-get install yarn -y
yarn --version

sudo npm config set proxy http://192.168.79.47:10811
sudo npm config set https-proxy http://192.168.79.47:10811
#npm config set registry http://registry.npmjs.org
#npm config delete proxy
#npm config delete https-proxy
sudo npm config list
npm help config

sudo npm install -g grunt-cli
grunt --version
sudo npm install -g pkg
sudo npm install -g cnpm --registry=https://registry.npm.taobao.org
sudo npm uninstall -g cnpm

node.js开发环境
vscode

CommonJS模块使用require()加载和module.exports输出
ES6模块使用import和export

npm
npm init
npm install package-name
npm install
npm update package-name
npm uninstall package-name
npm list

async/await/Promise/then/catch
async用于声明一个异步函数，该函数会自动返回一个Promise
await用于等待一个Promise完成，并返回其结果，只能在async函数内部使用
让异步代码更加简洁和易读，避免了回调地狱

迭代器 next()
生成器函数Generator function*
yield
yield*
co(function* () {})

new

TypeScript

prototype

typeof
instanceof

npx
sudo npm install -g npx

垃圾回收
标记清除算法
node --max-old-space-size=6000 index.js
ode --expose-gc example.js
global.gc()
新空间中的对象都非常小大约为1-8MB,这里的垃圾回收也很快,新生代空间中垃圾回收过程中幸存下来的对象会被提升到老生代空间
新生代--max-new-space-size=2048,Scavenge算法,新生代空间会被一分为二划分成两个相等大小的from-space和to-space,将from space中存活的对象复制出来,然后移动它们到to space中或者被提升到老生代空间中,对于from space中没有存活的对象将会被释放,Scavenge算法非常快适合少量内存的垃圾回收,但是它有很大的空间开销,对于新生代少量内存是可以接受的
老生代--max-old-space-size=2048
Mark-Sweep处理时分为标记、清除两个步骤,与Scavenge算法只复制活对象相反的是在老生代空间中由于活对象占多数Mark-Sweep在标记阶段遍历堆中的所有对象仅标记活对象把未标记的死对象清除,这时一次标记清除就已经完成了,被清除的对象遍布于各内存地址,产生很多内存碎片
Mark-Compact标记整理算法,其在工作过程中将活着的对象往一端移动,这时内存空间是紧凑的,移动完成之后,直接清理边界之外的内存
增量标记的方式减少停顿时间
如果新生区中某个对象只有一个指向它的指针而这个指针恰好是在老生区的对象当中,我们如何才能知道新生区中那个对象是活跃的呢,我们并不希望将老生区再遍历一次,因为老生区中的对象很多,这样做一次消耗太大,为了解决这个问题,实际上在写缓冲区中有一个列表(我们称之为CrossRefList),列表中记录了所有老生区对象指向新生区的情况,新对象诞生的时候,并不会有指向它的指针,而当有老生区中的对象出现指向新生区对象的指针时,我们便记录下来这样的跨区指向,由于这种记录行为总是发生在写操作时,它被称为写屏障,因为每个写操作都要经历这样一关
node-heapdump
node-profiler

内存泄漏
全局变量,闭包引用,事件绑定,缓存爆炸

package.json

Function.prototype.bind() 返回的是函数，参数和call一样
Function.prototype.call() 参数是逗号分开 func.call(this, arg1, arg2);
Function.prototype.apply() 参数都放在一个数组 func.apply(this, [arg1, arg2])
call和apply为了改变函数体内部this的指向

Array.prototype.slice()
Array.prototype.slice.call

Object.keys() 返回一个由给定对象自身的可枚举的字符串键属性名组成的数组
Object.values()
Object.create() 以一个现有对象作为原型，创建一个新对象

require
module.exports = sayHello;
module.exports = { add, subtract };
default export

import
import { member } from 'modulePath'