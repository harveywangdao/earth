ReactDOM.createRoot() 创建一个React根实例，支持并发渲染特性
ReactDOM.render() 将React元素渲染到指定的DOM节点
ReactDOM.unmountComponentAtNode(container) 卸载指定DOM节点上的React组件
ReactDOMServer.renderToString(element) 将React元素渲染为静态HTML字符串，用于服务器端渲染

React.StrictMode
createElement
cloneElement
createFactory
Children.map

componentDidMount() 组件挂载后调用，通常用于数据获取、订阅等副作用操作

componentDidUpdate() 组件更新后调用，通常用于响应props或state的变化

componentWillUnmount() 组件将被卸载前调用，用于清理定时器、取消订阅等资源释放

useState(initialState) 声明一个状态变量及其更新函数

useContext(context) 获取并订阅一个React context

useReducer(reducer, initialState) 声明一个复杂状态逻辑的reducer和dispatch函数

useCallback(callback, [dependencies]) 缓存一个回调函数，以便在依赖项变化时避免重复创建

useRef(initialValue) 创建一个持久化的引用，可用于访问DOM元素或缓存任何可变值
改变ref不会触发重新渲染

useImperativeHandle() 用于使用ref时暴露DOM元素的方法

lazy:
在组件第一次被渲染之前延迟加载组件的代码,不要在其他组件内部声明lazy组件,在头部声明
const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));
<Suspense>:
允许在子组件完成加载前展示后备方案
<Suspense fallback={<Loading />}>
  <SomeComponent />
</Suspense>

useDeferredValue:
startTransition():
useTransition():

Context:
允许父组件向其下层无论多深的任何组件提供信息,而无需通过props显式传递
createContext 组件外调用
useContext

import { createContext } from 'react';
export const LevelContext = createContext(1);

import { useContext } from 'react';
import { LevelContext } from './LevelContext.js';
const level = useContext(LevelContext);

<section className="section">
  <LevelContext value={level}>
    {children}
  </LevelContext>
</section>

<Section level={1}>
<Heading>主标题</Heading>
</Section>

use:
React API
const value = use(resource);
读取类似于Promise或context的资源的值,可以在循环和条件语句中调用use,useContext必须在组件的顶层调用

React Hooks:
使函数组件能够拥有类组件的一些特性,例如状态管理和生命周期方法的使用
useState, useEffect, useContext, useReducer, useCallback, useMemo, useRef, useImperativeHandle

React.memo:
用于优化函数组件的性能，它通过记忆组件的渲染输出，在组件的props没有变化时跳过重新渲染，从而提高性能
将一个函数组件作为参数传递给React.memo，并返回一个记忆化的组件
只会对比前后的props，如果没有变化则不会重新渲染
const MemoizedComponent = memo(SomeComponent, arePropsEqual?)

useMemo(factory, [dependencies]) 缓存计算值，以便在依赖项变化时避免重复计算

Effect:
useEffect() 声明一个副作用操作，类似于componentDidMount和componentDidUpdate的组合
每当你的组件渲染时，React会先更新页面，然后再运行useEffect中的代码

import { useEffect } from 'react';
useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => {
    connection.disconnect();
  };
}, []);

Ref:
forwardRef

React Router:
npm install react-router-dom
import {BrowserRouter as Router, Routes, Route, Link} from 'react-router-dom';
import { Link, Outlet } from 'react-router-dom';
const Dashboard = () => {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
        <ul>
          <li>
            <Link to="profile">Profile</Link>
          </li>
          <li>
            <Link to="settings">Settings</Link>
          </li>
        </ul>
      </nav>
      <Outlet />
    </div>
  );
};

const App = () => {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/">Home</Link>
            </li>
            <li>
              <Link to="/dashboard">Dashboard</Link>
            </li>
          </ul>
        </nav>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/dashboard" element={<Dashboard />}>
            嵌套路由:
            <Route path="profile" element={<Profile />} />
            <Route path="settings" element={<Settings />} />
          </Route>
        </Routes>
      </div>
    </Router>
  );
};
<Route path="*" element={<Navigate to="/" replace />} />

useParams() 获取当前路由匹配的动态参数
import { useParams } from 'react-router-dom';
const User = () => {
  const { userId } = useParams();
  return <h2>User ID: {userId}</h2>;
};
<Route path="/user/:userId" element={<User />} />

React Refs:
React.createRef 类组件
useRef 函数组件

CSS:
选择器
p {color:red;}
#id {text-align:center;color:red;}
.center {text-align:center;}
p.center {text-align:center;}
.marked p{ } class="marked" 元素内的p元素指定一个样式
div p {background-color:yellow;} div中的p
div>p {background-color:yellow;} div中的第一级p
div+p {background-color:yellow;} 相邻
div~p {background-color:yellow;} 之后相邻
p:first-child {color:blue;}
[type] {border: 1px solid red;} 选择所有具有type属性的元素
[type="text"] {background-color: yellow;}
[class~="button"] {font-weight: bold;} 选择属性值中包含button的元素
[lang|="en"] {color: green;} 选择所有lang属性是en或者以en-开头的元素
[href^="https"] {text-decoration: none;} 选择所有href属性以https开头的链接
[src$=".jpg"] {border: 2px solid blue;} 选择所有src属性以.jpg结尾的图片
[title*="tutorial"] {font-style: italic;} 选择所有title属性中包含tutorial的元素

外部样式表:
<head>
<link rel="stylesheet" type="text/css" href="mystyle.css">
</head>
内部样式表:
<head>
<style>
p {margin-left:20px;}
</style>
</head>
内联样式:
<p style="color:sienna;margin-left:20px">这是一个段落。</p>

颜色:
#ff0000
rgb(255,0,0)

字体:

Size:
16px=1em
deg角度

布局:
边距 margin 外边距
边框 border
填充 padding 内边距
outline

a:link {color:#000000;}      /* 未访问链接*/
a:visited {color:#00FF00;}  /* 已访问链接 */
a:hover {color:#FF00FF;}  /* 鼠标移动到链接上 */
a:active {color:#0000FF;}  /* 鼠标点击时 */

@media:
@font-face
{
    font-family: myFirstFont;
    src: url(sansation_light.woff);
}
@keyframes myfirst
{
    from {background: red;}
    to {background: yellow;}
}

Tailwind CSS:
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
tailwind.config.js
postcss.config.js

Sass:
npm i sass
$fontsize: 18px;
!global
@import filename;
@mixin important-text {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
}
@mixin bordered($color, $width) {
  border: $width solid $color;
}
selector {
  @include mixin-name;
}
@extend 继承
.button-report  {
  @extend .button-basic;
  background-color: red;
}

React:
npm create vite@latest my-app -- --template react

sudo npm install -g create-react-app
#sudo npm uninstall -g create-react-app
sudo create-react-app my-app
cd my-app
npm start

npx create-react-app my-app
cd my-app
npm start
http://192.168.181.139:3000

npx create-next-app@latest
cd my-app
npm run dev
http://192.168.181.139:3000

npx create-react-router@latest my-react-router-app
cd my-react-router-app
npm i
npm run dev
http://192.168.181.139:5173

cd jssrc/beszel/beszel
make build
make build-hub
./build/beszel_linux_amd64 serve --http "0.0.0.0:8090"
./build/beszel-agent_linux_amd64 -key="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKZvCr2JRSVIaSfJoiQ97UmTmEEpdOsxKsQgo6B2YRJo" -listen=8564
