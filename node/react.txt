ReactDOM.createRoot() 创建一个React根实例，支持并发渲染特性
ReactDOM.render() 将React元素渲染到指定的DOM节点
ReactDOM.unmountComponentAtNode(container) 卸载指定DOM节点上的React组件
ReactDOMServer.renderToString(element) 将React元素渲染为静态HTML字符串，用于服务器端渲染

React.StrictMode
createElement
cloneElement
createFactory
Children.map

componentDidMount() 组件挂载后调用，通常用于数据获取、订阅等副作用操作

componentDidUpdate() 组件更新后调用，通常用于响应props或state的变化

componentWillUnmount() 组件将被卸载前调用，用于清理定时器、取消订阅等资源释放

useState(initialState) 声明一个状态变量及其更新函数

useEffect() 声明一个副作用操作，类似于componentDidMount和componentDidUpdate的组合

useContext(context) 获取并订阅一个 React context

useReducer(reducer, initialState) 声明一个复杂状态逻辑的reducer和dispatch函数

useCallback(callback, [dependencies]) 缓存一个回调函数，以便在依赖项变化时避免重复创建

useMemo(factory, [dependencies]) 缓存计算值，以便在依赖项变化时避免重复计算

useRef(initialValue) 创建一个持久化的引用，可用于访问DOM元素或缓存任何可变值

useImperativeHandle() 用于使用ref时暴露DOM元素的方法

React Hooks:
使函数组件能够拥有类组件的一些特性,例如状态管理和生命周期方法的使用
useState, useEffect, useContext, useReducer, useCallback, useMemo, useRef, useImperativeHandle

React.memo:
用于优化函数组件的性能，它通过记忆组件的渲染输出，在组件的props没有变化时跳过重新渲染，从而提高性能
将一个函数组件作为参数传递给React.memo，并返回一个记忆化的组件
只会对比前后的 props，如果没有变化则不会重新渲染

React Router:
npm install react-router-dom
import {BrowserRouter as Router, Routes, Route, Link} from 'react-router-dom';
import { Link, Outlet } from 'react-router-dom';
const Dashboard = () => {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
        <ul>
          <li>
            <Link to="profile">Profile</Link>
          </li>
          <li>
            <Link to="settings">Settings</Link>
          </li>
        </ul>
      </nav>
      <Outlet />
    </div>
  );
};

const App = () => {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/">Home</Link>
            </li>
            <li>
              <Link to="/dashboard">Dashboard</Link>
            </li>
          </ul>
        </nav>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/dashboard" element={<Dashboard />}>
            嵌套路由:
            <Route path="profile" element={<Profile />} />
            <Route path="settings" element={<Settings />} />
          </Route>
        </Routes>
      </div>
    </Router>
  );
};
<Route path="*" element={<Navigate to="/" replace />} />

useParams() 获取当前路由匹配的动态参数
import { useParams } from 'react-router-dom';
const User = () => {
  const { userId } = useParams();
  return <h2>User ID: {userId}</h2>;
};
<Route path="/user/:userId" element={<User />} />

React Refs:
React.createRef 类组件
useRef 函数组件




Tailwind CSS:
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
tailwind.config.js
postcss.config.js

Sass:
npm i sass




















